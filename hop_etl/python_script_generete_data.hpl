<?xml version="1.0" encoding="UTF-8"?>
<pipeline>
  <info>
    <name>python_script_generete_data</name>
    <name_sync_with_filename>Y</name_sync_with_filename>
    <description/>
    <extended_description/>
    <pipeline_version/>
    <pipeline_type>Normal</pipeline_type>
    <parameters>
    </parameters>
    <capture_transform_performance>N</capture_transform_performance>
    <transform_performance_capturing_delay>1000</transform_performance_capturing_delay>
    <transform_performance_capturing_size_limit>100</transform_performance_capturing_size_limit>
    <created_user>-</created_user>
    <created_date>2024/09/21 14:13:38.042</created_date>
    <modified_user>-</modified_user>
    <modified_date>2024/09/21 14:13:38.042</modified_date>
  </info>
  <notepads>
  </notepads>
  <order>
    <hop>
      <from>Generate rows</from>
      <to>Script</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Script</from>
      <to>Dummy (do nothing)</to>
      <enabled>Y</enabled>
    </hop>
  </order>
  <transform>
    <name>Dummy (do nothing)</name>
    <type>Dummy</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <attributes/>
    <GUI>
      <xloc>336</xloc>
      <yloc>112</yloc>
    </GUI>
  </transform>
  <transform>
    <name>Generate rows</name>
    <type>RowGenerator</type>
    <description/>
    <distribute>N</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <fields>
</fields>
    <interval_in_ms>5000</interval_in_ms>
    <last_time_field>FiveSecondsAgo</last_time_field>
    <limit>10</limit>
    <never_ending>N</never_ending>
    <row_time_field>now</row_time_field>
    <attributes/>
    <GUI>
      <xloc>64</xloc>
      <yloc>112</yloc>
    </GUI>
  </transform>
  <transform>
    <name>Script</name>
    <type>SuperScript</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <fields>
      <field>
        <length>-1</length>
        <name>nome</name>
        <precision>-1</precision>
        <rename>nome</rename>
        <replace>N</replace>
        <scriptResult>N</scriptResult>
        <type>String</type>
      </field>
      <field>
        <length>-1</length>
        <name>cpf</name>
        <precision>-1</precision>
        <rename>cpf</rename>
        <replace>N</replace>
        <scriptResult>N</scriptResult>
        <type>String</type>
      </field>
      <field>
        <length>-1</length>
        <name>endereco</name>
        <precision>-1</precision>
        <rename>endereco</rename>
        <replace>N</replace>
        <scriptResult>N</scriptResult>
        <type>String</type>
      </field>
    </fields>
    <scriptLanguage>python</scriptLanguage>
    <scripts>
      <script>
        <scriptBody>import random

# Listas de nomes e sobrenomes
nomes = ['Ana', 'Bruno', 'Carla', 'Daniel', 'Eduardo']
sobrenomes = ['Silva', 'Santos', 'Oliveira', 'Pereira', 'Souza']

# Função para gerar um nome completo aleatório
def gerar_nome():
    return random.choice(nomes) + ' ' + random.choice(sobrenomes)

# Função para gerar um CPF válido
def gerar_cpf():
    def calc_digitos(numeros):
        soma = sum([int(numeros[i]) * (len(numeros)+1 - i) for i in range(len(numeros))])
        resto = 11 - (soma % 11)
        return str(resto if resto &lt; 10 else 0)

    numeros = ''.join([str(random.randint(0,9)) for _ in range(9)])
    digito1 = calc_digitos(numeros)
    digito2 = calc_digitos(numeros + digito1)
    cpf = '{}.{}.{}-{}'.format(numeros[:3], numeros[3:6], numeros[6:], digito1 + digito2)
    return cpf

# Função para gerar um endereço aleatório
def gerar_endereco():
    ruas = ['Rua A', 'Av. B', 'Travessa C', 'Alameda D', 'Estrada E']
    numeros = range(1, 1000)
    return random.choice(ruas) + ', ' + str(random.choice(numeros))

# Gerar os dados
nome = gerar_nome()
cpf = gerar_cpf()
endereco = gerar_endereco()
</scriptBody>
        <scriptName>script1</scriptName>
        <scriptType>0</scriptType>
      </script>
    </scripts>
    <attributes/>
    <GUI>
      <xloc>208</xloc>
      <yloc>112</yloc>
    </GUI>
  </transform>
  <transform_error_handling>
  </transform_error_handling>
  <attributes/>
</pipeline>
